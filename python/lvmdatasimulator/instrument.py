# encoding: utf-8
#
# @Author: Oleg Egorov, Enrico Congiu
# @Date: Nov 12, 2021
# @Filename: field.py
# @License: BSD 3-Clause
# @Copyright: Oleg Egorov, Enrico Congiu
import os.path
from functools import cached_property
import functools
import astropy.units as u
import lvmdatasimulator.wavecoords as w

from dataclasses import dataclass
from astropy.io import ascii
from scipy.interpolate import interp1d


from lvmdatasimulator import DATA_DIR
from abc import ABC, abstractmethod


@dataclass
class Branch:
    """
    Low level class containing the information about a single spectrograph channel.

    Parameters:
        name (str):
            Name of the branch.
        wavecoord (w.WaveCoord):
            Wavelength solution associated to the branch
        lsf_fwhm (astropy.Quantity):
            FWHM of the LSF of the instrument. Defaults to 0.5 * u.AA.
        gain (astropy.Quantity):
            Gain of the sensor. Defaults to 1.0 * u.electron / u.adu
        ron (astropy.Quantity):
            Read out noise of the CCD. Defaults to 5.0 * u.electron / u.pix
        dark (astropy.Quantity):
            Dark current generated by the CCD.Defaults to 0.001 * u.electron / u.s / u.pix

    """

    name: str
    wavecoord: w.WaveCoord
    lsf_fwhm: u.AA = 0.5 * u.AA
    gain: u.electron / u.adu = 1.0 * u.electron / u.adu
    ron: u.electron = 5.0 * u.electron / u.pix
    dark: u.electron / u.s = 0.001 * u.electron / u.s / u.pix

    def __post_init__(self):
        if self.name not in ['linear', 'red', 'blue', 'ir']:
            raise ValueError(f'{self.name} is not an acepted branch name.')

    @cached_property
    def efficiency(self):
        """Read the branch efficiency from a file."""

        filename = os.path.join(DATA_DIR, 'instrument', f'LVM_ELAM_{self.name}.dat')
        data = ascii.read(filename, names=['col1', 'col2'])
        lam0 = data['col1']
        elam0 = data['col2']
        f = interp1d(lam0, elam0, fill_value='extrapolate')
        return f(self.wavecoord.wave)


class Spectrograph(ABC):
    """
    Abstract class defining a spectrograph.
    """

    @property
    @abstractmethod
    def branches(self):
        pass


class LinearSpectrograph(Spectrograph):
    """
    Simplified version of the LVM spectrograph. Single branch, full wavelength range, constant LSF.
    """

    def __init__(self, bundle_name='central'):
        self.bundle_name = bundle_name

    @functools.cached_property
    def branches(self):
        return [Branch(name='linear', wavecoord=w.LinearWave())]


class LVMSpectrograph(Spectrograph):
    """
    More realistic model of the spectrograph. Three different branches. Still not implemented.
    """

    def __init__(self, bundle_name='central'):
        self.bundle_name = bundle_name

    @functools.cached_property
    def branches(self):
        return [Branch(name='blue', wavecoord=w.BlueWave()),
                Branch(name='red', wavecoord=w.RedWave()),
                Branch(name='ir', wavecoord=w.IRWave())]
